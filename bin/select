#!/usr/bin/env node

const { program } = require('commander');
const ___package = require('../package.json')
program
  .name('selectfromuser')
  .version(___package.version, '-v, --version, -version')
  .option('-w, --watch, -watch', 'watch config yaml files')
  .option('-f, --force, -force', 'force create config yaml')

// program
//   .command('create')
//   .description('creates new default.yml')
//   .action(() => {
//     console.log('WOW')
//   })

const parsed = program.parse()
const commands = parsed.args
const opts = program.opts()

if (commands[0] == 'create') {
  (async () => {
    try {
      const cp = require('cp-file')
      const path = require('path')
      await cp(path.join(__dirname, '../mock/default.yml'), path.join(process.cwd(), 'default.yml'), {
        overwrite: opts.force || false
      })
      console.log('A file created: default.yml')
    } catch (error) {
      if (String(error.message).includes('EEXIST')) {
        return console.error('The file already exists: default.yml')
      }
      console.error(error)
    }
  })()
  return 
} else if (opts.watch === true) {
  (async () => {
    try {
      const { getInstalledPath } = require('get-installed-path')
      let prefix_module_path = await getInstalledPath('selectfromuser')
      
      const path = require('path')
      const fs = require('fs')
      const cwd_package_path = path.join(process.cwd(), 'package.json')
      if (fs.existsSync(cwd_package_path)) {
        const cwd_package_json = require(cwd_package_path)
        if (cwd_package_json.dependencies && cwd_package_json.dependencies.selectfromuser) {
          prefix_module_path = path.join(process.cwd(), 'node_modules/selectfromuser')
        }
      }
      console.log('Using path: ', prefix_module_path)
      
      const nodemon = require('nodemon')
      nodemon({
        script: path.join(prefix_module_path, 'bin/select'),
        ext: 'yml yaml',
        watch: process.env.NODE_CONFIG_DIR || '.',
      });
    
      nodemon.on('start', function () {
        console.log('App has started');
      }).on('quit', function () {
        console.log('App has quit');
        process.exit();
      }).on('restart', function (files) {
        console.log('App restarted due to: ', files);
      });
    } catch (error) {
      console.error(error)
      return
    }
  })()
  return
}

const app = require('..').app
const http = require('http')

// const __package = path.join(process.cwd(), 'package.json')

// if(!fs.existsSync(__package)){
//   console.log(chalk.red('package.json not found'))
//   return
// }


/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

const port = app.get('port')

app.prehook( () => {
  server.listen(port)
  server.on('error', onError)
  server.on('listening', app.posthook)
})

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}